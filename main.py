import telebot
import requests
from telebot import types
import time
from bs4 import BeautifulSoup
from notifications import Notifications
from analytics import Analytics
from random import randint
from actualrate import Rate

TOKEN = "Your token"

bot = telebot.TeleBot(TOKEN)


class Notice:

    @bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "‚õΩ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    def creating_button_notifications(message):
        keyboard = types.InlineKeyboardMarkup()
        coin_btc = types.InlineKeyboardButton(text='Bitcoin', callback_data='Bitcoin_Notifications')
        keyboard.add(coin_btc)
        bot.send_message(message.chat.id, 'üòû–°–µ–π—á–∞—Å, –º—ã –º–æ–∂–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–µ—Ç—ã Bitcoinüòû', reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Bitcoin_Notifications'))
    def bitcoin_notifications(call):
        coast = Notifications()
        price = float(coast.get_cryptprice())
        fin_price = str(price) + "$"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.' + '\n' + '–ö—É—Ä—Å BTC –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ' + fin_price)
        coast.check_price(call=call)

class Analysis:

    @bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "üë©‚Äçüíª–∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    def creating_button_analytics(message):
        keyboard = types.InlineKeyboardMarkup()
        first_coin = types.InlineKeyboardButton(text='Bitcoin', callback_data='Bitcoin_Analytics')
        second_coin = types.InlineKeyboardButton(text='Ethereum', callback_data='Ethereum_Analytics')
        third_coin = types.InlineKeyboardButton(text='XRP', callback_data='XRP_Analytics')
        fourth_coin = types.InlineKeyboardButton(text='Cardano', callback_data='Cardano_Analytics')
        fifth_coin = types.InlineKeyboardButton(text='Tether', callback_data='Tether_Analytics')
        sentence = '''üîª–í—ã–±–µ—Ä–∏–µ—Ç –æ–¥–Ω—É –∏–∑ 5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüîª'''
        keyboard.add(first_coin, second_coin, third_coin, fourth_coin, fifth_coin)
        bot.send_message(message.chat.id, sentence, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Bitcoin_Analytics'))
    def bitcoin_analytics(call):
        Analytics().main_analytics(call=call, link='https://ru.tradingview.com/symbols/BTCUSD/technicals/')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Ethereum_Analytics'))
    def ethereum_analytics(call):
        Analytics().main_analytics(call=call, link='https://ru.tradingview.com/symbols/ETHUSD/technicals/')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('XRP_Analytics'))
    def xrp_analytics(call):
        Analytics().main_analytics(call=call, link='https://ru.tradingview.com/symbols/XRPUSD/technicals/')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Cardano_Analytics'))
    def cardano_analytics(call):
        Analytics().main_analytics(call=call, link='https://ru.tradingview.com/symbols/ADAUSDT/technicals/')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Tether_Analytics'))
    def tether_analytics(call):
        Analytics().main_analytics(call=call, link='https://ru.tradingview.com/symbols/USDTUSD/technicals/')

class Game:

    @bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "üé©–º–∏–Ω–∏-–∏–≥—Ä–∞")
    def game(message):
        keyboard = types.InlineKeyboardMarkup()
        coinflip = types.InlineKeyboardButton(text='–ë—Ä–æ—Å–æ–∫', callback_data='Coin_UP')
        keyboard.add(coinflip)
        bot.send_message(message.chat.id, 'üíé–ü–æ–¥–±—Ä–æ—Å—å—Ç–µ –º–æ–Ω–µ—Ç—Éüíé', reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Coin_UP'))
    def game_start(call):
        coin = randint(1, 2)
        if coin == 1:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üí∞–£ –≤–∞—Å –æ—Ä–µ–ª, –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—Éüí∞')
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üíÄ–£ –≤–∞—Å —Ä–µ—à–∫–∞, –±–æ—Ç –Ω–µ —Å–æ–≤–µ—Ç—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.üíÄ')

class Course:

    @bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "üìà–∫—É—Ä—Å")
    def creating_button_course(message):
        keyboard = types.InlineKeyboardMarkup()
        first_coin = types.InlineKeyboardButton(text='Bitcoin', callback_data='Bitcoin_Course')
        second_coin = types.InlineKeyboardButton(text='Ethereum', callback_data='Ethereum_Course')
        third_coin = types.InlineKeyboardButton(text='XRP', callback_data='XRP_Course')
        fourth_coin = types.InlineKeyboardButton(text='Cardano', callback_data='Cardano_Course')
        fifth_coin = types.InlineKeyboardButton(text='Tether', callback_data='Tether_Course')
        sentence = '''üîª–í—ã–±–µ—Ä–∏–µ—Ç –æ–¥–Ω—É –∏–∑ 5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüîª'''
        keyboard.add(first_coin, second_coin, third_coin, fourth_coin, fifth_coin)
        bot.send_message(message.chat.id, sentence, reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Bitcoin_Course'))
    def bitcoin_course(call):
        Rate().actual_rate_return(call=call, link='https://ru.investing.com/crypto/bitcoin/btc-usd', coin='Bitcoin')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Ethereum_Course'))
    def ethereum_course(call):
        Rate().actual_rate_return(call=call, link='https://ru.investing.com/crypto/ethereum/eth-usd', coin='Ethereum')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('XRP_Course'))
    def xrp_course(call):
        Rate().actual_rate_return(call=call, link='https://ru.investing.com/crypto/xrp/xrp-usd', coin='XRP')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Cardano_Course'))
    def cardano_course(call):
        Rate().actual_rate_return(call=call, link='https://ru.investing.com/crypto/cardano/ada-usd', coin='Cardano')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('Tether_Course'))
    def tether_course(call):
        Rate().actual_rate_return(call=call, link='https://ru.investing.com/crypto/tether/usdt-usd', coin='Tether')

class Information:

    @bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "üíº–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    def main_information(message):
        info = '''üë®‚Äçüè´–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ª—é–¥–µ–π, –∫—Ç–æ –∏–Ω–µ—Ç–µ—Ä—Å—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.

–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:
    - –ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    - –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    - –°—ã–≥—Ä–∞—Ç—å –≤ –ú–∏–Ω–∏-–ò–≥—Ä—É, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
    - –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –ø–æ–≤—ã—Å–∏—Ç—Å—è –∏–ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—å—Å—è

‚õë–ù–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –ø–æ–º–æ—á—å –ª—é–¥—è–º. –ë–æ—Ç –Ω–µ –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –æ–Ω –ª–∏—à—å —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä'''
        bot.send_message(message.chat.id, info)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
if __name__ == '__main__':

    @bot.message_handler(commands=["start"])
    def first_message(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        analytics = types.KeyboardButton('üë©‚Äçüíª–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        rate = types.KeyboardButton('üìà–ö—É—Ä—Å')
        notifications = types.KeyboardButton('‚õΩ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        game = types.KeyboardButton('üé©–ú–∏–Ω–∏-–ò–≥—Ä–∞')
        information = types.KeyboardButton('üíº–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        markup.add(analytics, rate, notifications, game, information)
        bot.send_message(message.chat.id, '''üòÄ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CryptMoneyüòÄ

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º, –Ω–∞ –≤—ã–±–æ—Ä –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è 5 –∫–ª–∞–≤–∏—à. –î–ª—è –Ω–∞—á–∞–ª–∞, —Å–æ–≤–µ—Ç—É–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å üíº–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–πüíº.

ü§ë–£–¥–∞—á–Ω—ã—Ö –≤–∞–º —Ç–æ—Ä–≥–æ–≤ü§ë''', reply_markup=markup)

    bot.polling()
